1. 프로그램 설치
- http://git-scm.com 에서 다운로드
- 또는 구글에서 git 라고 치며 위 사이트가 나옴

2. 프로그램 시작
- git cmd 창에서 시작
- 파일 관리하고자 하는 폴더로 이동

3. git 사용법
3.1. 사용자 등록
git config --global user.name "my_name"
git config --global user.email "my_email"

git local repository
- 파일의 이력을 관리하기 위한 저장소 생성 필요
- Git Local Repository는 폴더 형태로 [.git]이라는 폴더 명으로 생성됨
- 해당 폴더로 이동하고, git init 실행하면 git repository가 생성됨
-

3.2. Staging Are에 파일을 등록(tracking 파일 등록)
- git이 최초에는 파일 상태를 추적하기 않음, untracked file 이라고 함
- tracking 하려면 먼저 git에 등록 해야 함, tracking file로 등록되면 파일에 수정이 발생하면 git에서 확인할 수 있음
- git add 파일 이름
- git status 로 git에 등록된 파일 확인 가능   ---> staged filed 로 등록됨, 변화가 생기면 추적 가능 tracking 시작함
- tacking을 한다는 말은 git에서 file을 staged 했다고 표현함
- 파일 작업 중 수정을 하고 상태를 저장하고 싶으면 git add 파일 이름을 해줘야 함

3.3. Git Repository로 파일을 등록 (파일을 Commnit )
- 파일을 commnit 하려면
git commit git_test.txt -m "First Commit"   ----> committed file로 등록됨, 버전 관리 프로그램으로 등록됨
- commit한 후에 다시 수정하면 다시 tracking을 시작, git status에서 수정 했는지 여부 확인 가능
-------------------------
gitignore 만들기
.gitignore 파일을 만들고
cmd 창에서 move( 또는 mv) .gitignore.txt .gitignore

.gitignore 파일에 등록된 파일은 git 무시 됨

git commit -m "Add .gitignore file"
git rm test_abc.txt   window에서 remove와는 별개로 git에서 해줘야 함

파일 변경 시
git mv git_test.txt test.txt

이후 git status에서 파일 변경 사항 확인 가능

git log 하면 이력 확인 가능
git log --stat
git log --pretty=oneline
git log --pretty=format : "%h - %an, %ar :%s"
git log --pretty=format : "%h - %an, %ar :%s" --graph

이전 상태로 돌아가기
git checkout "log번호"
다시 원래 상태로 돌아 가려면 git checkout

branch 만들기
git branch branch 이름
기본적으로 master branch 이름이 있음

새롭게 만든 branch로 설정하려면
git checkout branch 이름
